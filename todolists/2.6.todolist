# Overall Things for Adept 2.6

HIGH-PRIORITY:

MEDIUM-PRIORITY:
* allow '+=', '-=', etc. with definitions of '__add__', '__subtract__', etc.
* 'each-in' loops with custom 'idx' name
    ```
    each object Object in objects using object_idx {
        
    }
    ```
* 'break default' to break to default condition of switch statement
* nodiscard / must_use
* __return__ and return POD
* easy and consistent constructors
* switch over enums without enums name for each entry: idea: exhaustive switch kind using CardKind { ... }
* @must
* @disallow
* @incognito
* traits/interfaces and 'derive Thingable1, Thingable2, Thingable3 for Thing'
* built-in meta functions like supports()
* constructor and @undef constructor
* static asserts
* compile-time evaluation
* better error propagation mechanism
* better enums
* module system

LOW-PRIORITY:
* Finish 'Any'
    * Casting to Any from non-builtin types
* __assign__ for fixed arrays maybe
* Allow polymorphic names for generic bases
* Add full linux cross-compilation support
* Make 'typeinfo' work better with aliases and '*void'
* Add way to manually invoke DEINIT_SVARS
* Maybe add support for methods on non-struct types, e.g. toString(this *$#N $T) String,  toString(this *int),  toUnique(this *ubyte) <ubyte> Unique,  etc.
* Unconditional blocks (like: if true {}, except with 'if true' part)
* Specify default value arguments by name (e.g - captLoadTexturesByFieldName(this, assetsFolder: where(), approximateByDefault: true) )
* 'adept install https://github.com/IsaacShelton/Box2D'
* conditionless blocks
* match/when statement or something like that
* support for disallowing/disencouraging assignment for a composite type
* macro/snippet functions? that expand to be inline and never become an actual function
    ```
    snippet func boundsCheck(this *<$T> Array, index usize) {
        #if array_bounds_checks
        if index >= this.length {
            printf('<$%s> Array - error index out of bound\n', typenameof $T)
        }
        #end
    }
    ```
* fix issues with __assign__ auto-generation broken in b32ccdb5d397d645a0f4c65de0bfbc0eff38c61e

v2.4 COMPLETED:
+ Standard Library Imports
+ [] operator overload
+ Better var args support
+ Ensure that trying to use variadic arguments without __variadic_array__ defined, fails smoothly
+ Better constants syntax
+ Scoped constants
+ ~> operator
+ __as__
+ implicit vs explicit __as__
+ __initializer_list__
+ Replace 'const a = 0' with 'declare a = 0'
+ Allow for '*void' as an alternative to 'ptr'

v2.5 COMPLETED:
+ anonymous structures and unions
+ anonymous fields (with structures and unions)
+ typenameof expression
+ embed
+ 'repeat' loops with custom 'idx' name
+ add '\0'ub and make sure other '\0' forms exist
+ add support for 'thing1().thing2().thing3()' statements
+ fill in runtime type information for complex composite types
+ __compiler_major__, __compiler_minor__, __compiler_release__, __compiler_qualifier__
+ make __compiler_version__ a number, and add __compiler_version_name__
+ alignof expression

v2.6 COMPLETED:
+ records
+ fixed arrays of size determined at compile time
+ variable sized fixed arrays inside of data structures
+ __assign__ auto-generation
+ no more "new update" false-positives for preview builds
+ optional parameter names for foreign functions
