
import Unique
import 'sys/cstdio.adept'
import "configuration.adept"

enum adept\fs\ReadOptions (NONE, WITH_NEWLINE_ENDING)

func adept\fs\readTextContents(text_filename String, out output *String, options adept\fs\ReadOptions = ::NONE) successful {
    filename <ubyte> Unique = Unique(text_filename.cstr())

    buffer *ubyte = undef
    buffer_size usize = undef

    #if adept\emscripten
        buffer = node_fs_readFileSync(filename.ref(), options == ::WITH_NEWLINE_ENDING)
        if buffer == null, return false

        buffer_size = strlen(buffer)
    #else
        file *FILE = fopen(filename.ref(), 'r')
        if file == null, return false

        fseek(file, 0, SEEK_END)
        buffer_size = ftell(file)
        fseek(file, 0, SEEK_SET)

        buffer = malloc(buffer_size + 2)
        buffer_size = fread(buffer, 1, buffer_size, file)
        fclose(file)
    #end

    if options == ::WITH_NEWLINE_ENDING {
        buffer[buffer_size] = '\n'ub     // Append newline to flush everything
        buffer[buffer_size + 1] = '\0'ub // Terminate the string for good measure
        buffer_size += 1
    }

    *output = StringView(buffer, buffer_size)
    return true
}

func adept\fs\exists(file String) bool {
    filename <ubyte> Unique = Unique(file.cstr())

    #if adept\emscripten
        return node_fs_existsSync(filename.ref()) != 0
    #else
        f *FILE = fopen(filename.ref(), 'r')

        if f {
            fclose(f)
            return true
        }

        return false
    #end
}
