
namespace adept

import List
import String

enum TokenExtraKind (ID_ONLY, STRING, SIGNED, UNSIGNED, FLOATING)
enum TokenCategory (NONE, WORD, KEYWORD, OPERATOR, LITERAL, POLYMORPH, PREPROCESSOR)

alias string = String
alias signed = long
alias unsigned = ulong
alias floating = double

enum TokenID (
    NONE,
    WORD,
    STRING,
    CSTRING,
    ADD,
    SUBTRACT,
    MULTIPLY,
    DIVIDE,
    ASSIGN,
    EQUALS,
    NOTEQUALS,
    LESSTHAN,
    GREATERTHAN,
    LESSTHANEQ,
    GREATERTHANEQ,
    NOT,
    OPEN,
    CLOSE,
    BEGIN,
    END,
    NEWLINE,
    BYTE,
    UBYTE,
    SHORT,
    USHORT,
    INT,
    UINT,
    LONG,
    ULONG,
    USIZE,
    FLOAT,
    DOUBLE,
    MEMBER,
    AMPERSAND,
    NEXT,
    BRACKET_OPEN,
    BRACKET_CLOSE,
    MODULUS,
    GENERIC_INT,
    GENERIC_FLOAT,
    ADD_ASSIGN,
    SUBTRACT_ASSIGN,
    MULTIPLY_ASSIGN,
    DIVIDE_ASSIGN,
    MODULUS_ASSIGN,
    BIT_AND_ASSIGN,
    BIT_OR_ASSIGN,
    BIT_XOR_ASSIGN,
    BIT_LSHIFT_ASSIGN,
    BIT_RSHIFT_ASSIGN,
    BIT_LGC_LSHIFT_ASSIGN,
    BIT_LGC_RSHIFT_ASSIGN,
    ELLIPSIS,
    UBERAND,
    UBEROR,
    TERMINATE_JOIN,
    COLON,
    BIT_OR,
    BIT_XOR,
    BIT_LSHIFT,
    BIT_RSHIFT,
    BIT_COMPLEMENT,
    BIT_LGC_LSHIFT,
    BIT_LGC_RSHIFT,
    ASSOCIATE,
    META,
    POLYMORPH,
    MAYBE,
    INCREMENT,
    DECREMENT,
    TOGGLE,
    STRONG_ARROW,
    RANGE,
    GIVES,
    POLYCOUNT,
    POD_KEYWORD,
    ALIAS,
    ALIGNOF,
    AND,
    AS,
    AT,
    BREAK,
    CASE,
    CAST,
    CLASS,
    CONST,
    CONSTRUCTOR,
    CONTINUE,
    DEF,
    DEFAULT,
    DEFER,
    DEFINE,
    DELETE,
    EACH,
    ELSE,
    EMBED,
    ENUM,
    EXHAUSTIVE,
    EXTENDS,
    EXTERNAL,
    FALLTHROUGH,
    FALSE,
    FOR,
    FOREIGN,
    FUNC,
    FUNCPTR,
    GLOBAL,
    IF,
    IMPLICIT,
    IMPORT,
    IN,
    INOUT,
    LLVM_ASM,
    NAMESPACE,
    NEW,
    NULL,
    OR,
    OUT,
    OVERRIDE,
    PACKED,
    PRAGMA,
    PRIVATE,
    PUBLIC,
    RECORD,
    REPEAT,
    RETURN,
    SIZEOF,
    STATIC,
    STDCALL,
    STRUCT,
    SWITCH,
    THREAD_LOCAL,
    TRUE,
    TYPEINFO,
    TYPENAMEOF,
    UNDEF,
    UNION,
    UNLESS,
    UNTIL,
    USING,
    VA_ARG,
    VA_COPY,
    VA_END,
    VA_START,
    VERBATIM,
    VIRTUAL,
    WHILE,
    NUM_ITEMS
)

struct TokenAssociatedInfo (
    name StringView,
    category adept\TokenCategory,
    extra_kind adept\TokenExtraKind,
)

func getAssociatedInfo(token_id adept\TokenID) *adept\TokenAssociatedInfo {
    exhaustive switch token_id {
        case ::NONE,                  return static adept\TokenAssociatedInfo("none", ::NONE, ::ID_ONLY)
        case ::WORD,                  return static adept\TokenAssociatedInfo("word", ::WORD, ::STRING)
        case ::STRING,                return static adept\TokenAssociatedInfo("string", ::LITERAL, ::STRING)
        case ::CSTRING,               return static adept\TokenAssociatedInfo("cstring", ::LITERAL, ::STRING)
        case ::ADD,                   return static adept\TokenAssociatedInfo("add", ::OPERATOR, ::ID_ONLY)
        case ::SUBTRACT,              return static adept\TokenAssociatedInfo("subtract", ::OPERATOR, ::ID_ONLY)
        case ::MULTIPLY,              return static adept\TokenAssociatedInfo("multiply", ::OPERATOR, ::ID_ONLY)
        case ::DIVIDE,                return static adept\TokenAssociatedInfo("divide", ::OPERATOR, ::ID_ONLY)
        case ::ASSIGN,                return static adept\TokenAssociatedInfo("assign", ::OPERATOR, ::ID_ONLY)
        case ::EQUALS,                return static adept\TokenAssociatedInfo("equals", ::OPERATOR, ::ID_ONLY)
        case ::NOTEQUALS,             return static adept\TokenAssociatedInfo("not equals", ::OPERATOR, ::ID_ONLY)
        case ::LESSTHAN,              return static adept\TokenAssociatedInfo("less than", ::OPERATOR, ::ID_ONLY)
        case ::GREATERTHAN,           return static adept\TokenAssociatedInfo("greater than", ::OPERATOR, ::ID_ONLY)
        case ::LESSTHANEQ,            return static adept\TokenAssociatedInfo("less than or equal", ::OPERATOR, ::ID_ONLY)
        case ::GREATERTHANEQ,         return static adept\TokenAssociatedInfo("greater than or equal", ::OPERATOR, ::ID_ONLY)
        case ::NOT,                   return static adept\TokenAssociatedInfo("not", ::OPERATOR, ::ID_ONLY)
        case ::OPEN,                  return static adept\TokenAssociatedInfo("open", ::OPERATOR, ::ID_ONLY)
        case ::CLOSE,                 return static adept\TokenAssociatedInfo("close", ::OPERATOR, ::ID_ONLY)
        case ::BEGIN,                 return static adept\TokenAssociatedInfo("begin", ::OPERATOR, ::ID_ONLY)
        case ::END,                   return static adept\TokenAssociatedInfo("end", ::OPERATOR, ::ID_ONLY)
        case ::NEWLINE,               return static adept\TokenAssociatedInfo("newline", ::OPERATOR, ::ID_ONLY)
        case ::BYTE,                  return static adept\TokenAssociatedInfo("byte", ::LITERAL, ::SIGNED)
        case ::UBYTE,                 return static adept\TokenAssociatedInfo("ubyte", ::LITERAL, ::UNSIGNED)
        case ::SHORT,                 return static adept\TokenAssociatedInfo("short", ::LITERAL, ::SIGNED)
        case ::USHORT,                return static adept\TokenAssociatedInfo("ushort", ::LITERAL, ::UNSIGNED)
        case ::INT,                   return static adept\TokenAssociatedInfo("int", ::LITERAL, ::SIGNED)
        case ::UINT,                  return static adept\TokenAssociatedInfo("uint", ::LITERAL, ::UNSIGNED)
        case ::LONG,                  return static adept\TokenAssociatedInfo("long", ::LITERAL, ::SIGNED)
        case ::ULONG,                 return static adept\TokenAssociatedInfo("ulong", ::LITERAL, ::UNSIGNED)
        case ::USIZE,                 return static adept\TokenAssociatedInfo("usize", ::LITERAL, ::UNSIGNED)
        case ::FLOAT,                 return static adept\TokenAssociatedInfo("float", ::LITERAL, ::FLOATING)
        case ::DOUBLE,                return static adept\TokenAssociatedInfo("double", ::LITERAL, ::FLOATING)
        case ::MEMBER,                return static adept\TokenAssociatedInfo("member", ::OPERATOR, ::ID_ONLY)
        case ::AMPERSAND,             return static adept\TokenAssociatedInfo("address", ::OPERATOR, ::ID_ONLY)
        case ::NEXT,                  return static adept\TokenAssociatedInfo("next", ::OPERATOR, ::ID_ONLY)
        case ::BRACKET_OPEN,          return static adept\TokenAssociatedInfo("bracket open", ::OPERATOR, ::ID_ONLY)
        case ::BRACKET_CLOSE,         return static adept\TokenAssociatedInfo("bracket close", ::OPERATOR, ::ID_ONLY)
        case ::MODULUS,               return static adept\TokenAssociatedInfo("modulus", ::OPERATOR, ::ID_ONLY)
        case ::GENERIC_INT,           return static adept\TokenAssociatedInfo("integer literal", ::LITERAL, ::SIGNED)
        case ::GENERIC_FLOAT,         return static adept\TokenAssociatedInfo("floating point literal", ::LITERAL, ::FLOATING)
        case ::ADD_ASSIGN,            return static adept\TokenAssociatedInfo("add assign", ::OPERATOR, ::ID_ONLY)
        case ::SUBTRACT_ASSIGN,       return static adept\TokenAssociatedInfo("subtract assign", ::OPERATOR, ::ID_ONLY)
        case ::MULTIPLY_ASSIGN,       return static adept\TokenAssociatedInfo("multiply assign", ::OPERATOR, ::ID_ONLY)
        case ::DIVIDE_ASSIGN,         return static adept\TokenAssociatedInfo("divide assign", ::OPERATOR, ::ID_ONLY)
        case ::MODULUS_ASSIGN,        return static adept\TokenAssociatedInfo("modulus assign", ::OPERATOR, ::ID_ONLY)
        case ::BIT_AND_ASSIGN,        return static adept\TokenAssociatedInfo("bitwise and assign", ::OPERATOR, ::ID_ONLY)
        case ::BIT_OR_ASSIGN,         return static adept\TokenAssociatedInfo("bitwise or assign", ::OPERATOR, ::ID_ONLY)
        case ::BIT_XOR_ASSIGN,        return static adept\TokenAssociatedInfo("bitwise xor assign", ::OPERATOR, ::ID_ONLY)
        case ::BIT_LSHIFT_ASSIGN,     return static adept\TokenAssociatedInfo("bitwise left shift assign", ::OPERATOR, ::ID_ONLY)
        case ::BIT_RSHIFT_ASSIGN,     return static adept\TokenAssociatedInfo("bitwise right shift assign", ::OPERATOR, ::ID_ONLY)
        case ::BIT_LGC_LSHIFT_ASSIGN, return static adept\TokenAssociatedInfo("bitwise logical left shift assign", ::OPERATOR, ::ID_ONLY)
        case ::BIT_LGC_RSHIFT_ASSIGN, return static adept\TokenAssociatedInfo("bitwise logical right shift assign", ::OPERATOR, ::ID_ONLY)
        case ::ELLIPSIS,              return static adept\TokenAssociatedInfo("ellipsis", ::OPERATOR, ::ID_ONLY)
        case ::UBERAND,               return static adept\TokenAssociatedInfo("uber and", ::OPERATOR, ::ID_ONLY)
        case ::UBEROR,                return static adept\TokenAssociatedInfo("uber or", ::OPERATOR, ::ID_ONLY)
        case ::TERMINATE_JOIN,        return static adept\TokenAssociatedInfo("terminate join", ::OPERATOR, ::ID_ONLY)
        case ::COLON,                 return static adept\TokenAssociatedInfo("colon", ::OPERATOR, ::ID_ONLY)
        case ::BIT_OR,                return static adept\TokenAssociatedInfo("bitwise or", ::OPERATOR, ::ID_ONLY)
        case ::BIT_XOR,               return static adept\TokenAssociatedInfo("bitwise xor", ::OPERATOR, ::ID_ONLY)
        case ::BIT_LSHIFT,            return static adept\TokenAssociatedInfo("bitwise left shift", ::OPERATOR, ::ID_ONLY)
        case ::BIT_RSHIFT,            return static adept\TokenAssociatedInfo("bitwise right shift", ::OPERATOR, ::ID_ONLY)
        case ::BIT_COMPLEMENT,        return static adept\TokenAssociatedInfo("bitwise complement", ::OPERATOR, ::ID_ONLY)
        case ::BIT_LGC_LSHIFT,        return static adept\TokenAssociatedInfo("bitwise logical left shift", ::OPERATOR, ::ID_ONLY)
        case ::BIT_LGC_RSHIFT,        return static adept\TokenAssociatedInfo("bitwise logical right shift", ::OPERATOR, ::ID_ONLY)
        case ::ASSOCIATE,             return static adept\TokenAssociatedInfo("associate", ::OPERATOR, ::ID_ONLY)
        case ::META,                  return static adept\TokenAssociatedInfo("meta", ::PREPROCESSOR, ::STRING)
        case ::POLYMORPH,             return static adept\TokenAssociatedInfo("polymorph", ::POLYMORPH, ::STRING)
        case ::MAYBE,                 return static adept\TokenAssociatedInfo("maybe", ::OPERATOR, ::ID_ONLY)
        case ::INCREMENT,             return static adept\TokenAssociatedInfo("increment", ::OPERATOR, ::ID_ONLY)
        case ::DECREMENT,             return static adept\TokenAssociatedInfo("decrement", ::OPERATOR, ::ID_ONLY)
        case ::TOGGLE,                return static adept\TokenAssociatedInfo("toggle", ::OPERATOR, ::ID_ONLY)
        case ::STRONG_ARROW,          return static adept\TokenAssociatedInfo("strong arrow", ::OPERATOR, ::ID_ONLY)
        case ::RANGE,                 return static adept\TokenAssociatedInfo("range", ::OPERATOR, ::ID_ONLY)
        case ::GIVES,                 return static adept\TokenAssociatedInfo("gives", ::OPERATOR, ::ID_ONLY)
        case ::POLYCOUNT,             return static adept\TokenAssociatedInfo("polycount", ::LITERAL, ::STRING)
        case ::POD_KEYWORD,           return static adept\TokenAssociatedInfo("POD keyword", ::KEYWORD, ::ID_ONLY)
        case ::ALIAS,                 return static adept\TokenAssociatedInfo("alias keyword", ::KEYWORD, ::ID_ONLY)
        case ::ALIGNOF,               return static adept\TokenAssociatedInfo("alignof keyword", ::KEYWORD, ::ID_ONLY)
        case ::AND,                   return static adept\TokenAssociatedInfo("and keyword", ::KEYWORD, ::ID_ONLY)
        case ::AS,                    return static adept\TokenAssociatedInfo("as keyword", ::KEYWORD, ::ID_ONLY)
        case ::AT,                    return static adept\TokenAssociatedInfo("at keyword", ::KEYWORD, ::ID_ONLY)
        case ::BREAK,                 return static adept\TokenAssociatedInfo("break keyword", ::KEYWORD, ::ID_ONLY)
        case ::CASE,                  return static adept\TokenAssociatedInfo("case keyword", ::KEYWORD, ::ID_ONLY)
        case ::CAST,                  return static adept\TokenAssociatedInfo("cast keyword", ::KEYWORD, ::ID_ONLY)
        case ::CLASS,                 return static adept\TokenAssociatedInfo("class keyword", ::KEYWORD, ::ID_ONLY)
        case ::CONST,                 return static adept\TokenAssociatedInfo("const keyword", ::KEYWORD, ::ID_ONLY)
        case ::CONSTRUCTOR,           return static adept\TokenAssociatedInfo("constructor keyword", ::KEYWORD, ::ID_ONLY)
        case ::CONTINUE,              return static adept\TokenAssociatedInfo("continue keyword", ::KEYWORD, ::ID_ONLY)
        case ::DEF,                   return static adept\TokenAssociatedInfo("def keyword", ::KEYWORD, ::ID_ONLY)
        case ::DEFAULT,               return static adept\TokenAssociatedInfo("default keyword", ::KEYWORD, ::ID_ONLY)
        case ::DEFER,                 return static adept\TokenAssociatedInfo("defer keyword", ::KEYWORD, ::ID_ONLY)
        case ::DEFINE,                return static adept\TokenAssociatedInfo("define keyword", ::KEYWORD, ::ID_ONLY)
        case ::DELETE,                return static adept\TokenAssociatedInfo("delete keyword", ::KEYWORD, ::ID_ONLY)
        case ::EACH,                  return static adept\TokenAssociatedInfo("each keyword", ::KEYWORD, ::ID_ONLY)
        case ::ELSE,                  return static adept\TokenAssociatedInfo("else keyword", ::KEYWORD, ::ID_ONLY)
        case ::EMBED,                 return static adept\TokenAssociatedInfo("embed keyword", ::KEYWORD, ::ID_ONLY)
        case ::ENUM,                  return static adept\TokenAssociatedInfo("enum keyword", ::KEYWORD, ::ID_ONLY)
        case ::EXHAUSTIVE,            return static adept\TokenAssociatedInfo("exhaustive keyword", ::KEYWORD, ::ID_ONLY)
        case ::EXTENDS,               return static adept\TokenAssociatedInfo("extends keyword", ::KEYWORD, ::ID_ONLY)
        case ::EXTERNAL,              return static adept\TokenAssociatedInfo("external keyword", ::KEYWORD, ::ID_ONLY)
        case ::FALLTHROUGH,           return static adept\TokenAssociatedInfo("fallthrough keyword", ::KEYWORD, ::ID_ONLY)
        case ::FALSE,                 return static adept\TokenAssociatedInfo("false keyword", ::KEYWORD, ::ID_ONLY)
        case ::FOR,                   return static adept\TokenAssociatedInfo("for keyword", ::KEYWORD, ::ID_ONLY)
        case ::FOREIGN,               return static adept\TokenAssociatedInfo("foreign keyword", ::KEYWORD, ::ID_ONLY)
        case ::FUNC,                  return static adept\TokenAssociatedInfo("func keyword", ::KEYWORD, ::ID_ONLY)
        case ::FUNCPTR,               return static adept\TokenAssociatedInfo("funcptr keyword", ::KEYWORD, ::ID_ONLY)
        case ::GLOBAL,                return static adept\TokenAssociatedInfo("global keyword", ::KEYWORD, ::ID_ONLY)
        case ::IF,                    return static adept\TokenAssociatedInfo("if keyword", ::KEYWORD, ::ID_ONLY)
        case ::IMPLICIT,              return static adept\TokenAssociatedInfo("implicit keyword", ::KEYWORD, ::ID_ONLY)
        case ::IMPORT,                return static adept\TokenAssociatedInfo("import keyword", ::KEYWORD, ::ID_ONLY)
        case ::IN,                    return static adept\TokenAssociatedInfo("in keyword", ::KEYWORD, ::ID_ONLY)
        case ::INOUT,                 return static adept\TokenAssociatedInfo("inout keyword", ::KEYWORD, ::ID_ONLY)
        case ::LLVM_ASM,              return static adept\TokenAssociatedInfo("llvm_asm keyword", ::KEYWORD, ::ID_ONLY)
        case ::NAMESPACE,             return static adept\TokenAssociatedInfo("namespace keyword", ::KEYWORD, ::ID_ONLY)
        case ::NEW,                   return static adept\TokenAssociatedInfo("new keyword", ::KEYWORD, ::ID_ONLY)
        case ::NULL,                  return static adept\TokenAssociatedInfo("null keyword", ::KEYWORD, ::ID_ONLY)
        case ::OR,                    return static adept\TokenAssociatedInfo("or keyword", ::KEYWORD, ::ID_ONLY)
        case ::OUT,                   return static adept\TokenAssociatedInfo("out keyword", ::KEYWORD, ::ID_ONLY)
        case ::OVERRIDE,              return static adept\TokenAssociatedInfo("override keyword", ::KEYWORD, ::ID_ONLY)
        case ::PACKED,                return static adept\TokenAssociatedInfo("packed keyword", ::KEYWORD, ::ID_ONLY)
        case ::PRAGMA,                return static adept\TokenAssociatedInfo("pragma keyword", ::KEYWORD, ::ID_ONLY)
        case ::PRIVATE,               return static adept\TokenAssociatedInfo("private keyword", ::KEYWORD, ::ID_ONLY)
        case ::PUBLIC,                return static adept\TokenAssociatedInfo("public keyword", ::KEYWORD, ::ID_ONLY)
        case ::RECORD,                return static adept\TokenAssociatedInfo("record keyword", ::KEYWORD, ::ID_ONLY)
        case ::REPEAT,                return static adept\TokenAssociatedInfo("repeat keyword", ::KEYWORD, ::ID_ONLY)
        case ::RETURN,                return static adept\TokenAssociatedInfo("return keyword", ::KEYWORD, ::ID_ONLY)
        case ::SIZEOF,                return static adept\TokenAssociatedInfo("sizeof keyword", ::KEYWORD, ::ID_ONLY)
        case ::STATIC,                return static adept\TokenAssociatedInfo("static keyword", ::KEYWORD, ::ID_ONLY)
        case ::STDCALL,               return static adept\TokenAssociatedInfo("stdcall keyword", ::KEYWORD, ::ID_ONLY)
        case ::STRUCT,                return static adept\TokenAssociatedInfo("struct keyword", ::KEYWORD, ::ID_ONLY)
        case ::SWITCH,                return static adept\TokenAssociatedInfo("switch keyword", ::KEYWORD, ::ID_ONLY)
        case ::THREAD_LOCAL,          return static adept\TokenAssociatedInfo("thread_local keyword", ::KEYWORD, ::ID_ONLY)
        case ::TRUE,                  return static adept\TokenAssociatedInfo("true keyword", ::KEYWORD, ::ID_ONLY)
        case ::TYPEINFO,              return static adept\TokenAssociatedInfo("typeinfo keyword", ::KEYWORD, ::ID_ONLY)
        case ::TYPENAMEOF,            return static adept\TokenAssociatedInfo("typenameof keyword", ::KEYWORD, ::ID_ONLY)
        case ::UNDEF,                 return static adept\TokenAssociatedInfo("undef keyword", ::KEYWORD, ::ID_ONLY)
        case ::UNION,                 return static adept\TokenAssociatedInfo("union keyword", ::KEYWORD, ::ID_ONLY)
        case ::UNLESS,                return static adept\TokenAssociatedInfo("unless keyword", ::KEYWORD, ::ID_ONLY)
        case ::UNTIL,                 return static adept\TokenAssociatedInfo("until keyword", ::KEYWORD, ::ID_ONLY)
        case ::USING,                 return static adept\TokenAssociatedInfo("using keyword", ::KEYWORD, ::ID_ONLY)
        case ::VA_ARG,                return static adept\TokenAssociatedInfo("va_arg keyword", ::KEYWORD, ::ID_ONLY)
        case ::VA_COPY,               return static adept\TokenAssociatedInfo("va_copy keyword", ::KEYWORD, ::ID_ONLY)
        case ::VA_END,                return static adept\TokenAssociatedInfo("va_end keyword", ::KEYWORD, ::ID_ONLY)
        case ::VA_START,              return static adept\TokenAssociatedInfo("va_start keyword", ::KEYWORD, ::ID_ONLY)
        case ::VERBATIM,              return static adept\TokenAssociatedInfo("verbatim keyword", ::KEYWORD, ::ID_ONLY)
        case ::VIRTUAL,               return static adept\TokenAssociatedInfo("virtual keyword", ::KEYWORD, ::ID_ONLY)
        case ::WHILE,                 return static adept\TokenAssociatedInfo("while keyword", ::KEYWORD, ::ID_ONLY)
        case ::NUM_ITEMS              return null // invalid state
    }

    return null // unreachable
}
