
import String

func adept\string\escape(string String, escaped_quote ubyte, surround bool) String {
    result String

    if escaped_quote && surround {
        result.append(escaped_quote)
    }

    each ubyte in string {
        unless it <= 0x1F || it == '\\'ub || (it == escaped_quote && escaped_quote) {
            // Put regular character
            result.append(it)
            continue
        }

        // Escape special character
        result.append('\\')

        switch it {
        case '\0'ub, result.append('0'ub)
        case '\t'ub, result.append('t'ub)
        case '\n'ub, result.append('n'ub)
        case '\r'ub, result.append('r'ub)
        case '\b'ub, result.append('b'ub)
        case '\\'ub, result.append('\\'ub)
        case '\e'ub, result.append('e'ub)
        default
            if(it == escaped_quote){
                // Escape quote character
                result.append(escaped_quote)
            } else {
                // Unrecognized special character, don't escape
                result.append(it)
            }
        }
    }

    if escaped_quote && surround {
        result.append(escaped_quote)
    }

    return result.commit()
}

record adept\string\UnescapeError (relative_position usize)

func adept\string\unescape(string String, out output *String) <adept\string\UnescapeError> Optional {
    output.clear()
    output.reserve(string.length)

    get usize = 0

    while get != string.length {
        if string[get] != '\\'ub || get + 1 == string.length {
            output.append(string[get++])
            continue
        }

        switch(string[get + 1]){
        case 'n'ub,  output.append('\n'ub)
        case 'r'ub,  output.append('\r'ub)
        case 't'ub,  output.append('\t'ub)
        case 'b'ub,  output.append('\b'ub)
        case '0'ub,  output.append('\0'ub)
        case '"'ub,  output.append('"'ub)
        case 'e'ub,  output.append('\e'ub)
        case '\''ub, output.append('\''ub)
        case '\\'ub, output.append('\\'ub)
        default
            return some(adept\string\UnescapeError(get))
        }

        get += 2
    }

    return none()
}
