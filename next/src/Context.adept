
import Array
import array_util
import String
import del

import "Output.adept"

enum adept\ContextIntent (FAILED_TO_PARSE_ARGS, HELP, COMPILE)
enum adept\ContextOutputMode (TERMINAL, CAPTURED)

struct adept\Context (
    intent adept\ContextIntent,
    output *adept\Output,
    filename <String> Optional,
    exit_code int,
) {
    constructor(argc int, argv **ubyte){
        args <String> List = Array(argv at 1, argc - 1).asList().map(func &StringView(*ubyte))

        this.setOutputMode(::TERMINAL)

        each arg String in args {
            if arg == "-h" || arg == "--help" {
                this.intent = ::HELP
                return
            } else if this.filename.isNone() && !arg.startsWith("-") {
                this.filename = some(arg.clone()).commit()
            } else {
                this.output.send(adept\Error("Unknown option `" + arg + "`", none()))
                this.intent = ::FAILED_TO_PARSE_ARGS
                return
            }
        }

        if this.filename.isNone() {
            if adept\fs\exists("next.adept") {
                this.filename.assign("next.adept")
            } else {
                this.intent = ::HELP
                return
            }
        }

        this.intent = ::COMPILE
    }

    func setOutputMode(mode adept\ContextOutputMode){
        if this.output, del(this.output)

        exhaustive switch mode {
        case ::TERMINAL
            this.output = new adept\TerminalOutput()
        case ::CAPTURED
            this.output = new adept\CapturedOutput()
        }
    }

    func __defer__ {
        del(this.output)
    }
}
